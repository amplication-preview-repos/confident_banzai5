/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GuideService } from "../guide.service";
import { GuideCreateInput } from "./GuideCreateInput";
import { Guide } from "./Guide";
import { GuideFindManyArgs } from "./GuideFindManyArgs";
import { GuideWhereUniqueInput } from "./GuideWhereUniqueInput";
import { GuideUpdateInput } from "./GuideUpdateInput";
import { StoreGuideInput } from "../StoreGuideInput";

export class GuideControllerBase {
  constructor(protected readonly service: GuideService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Guide })
  async createGuide(@common.Body() data: GuideCreateInput): Promise<Guide> {
    return await this.service.createGuide({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        audioUrl: true,
        content: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Guide] })
  @ApiNestedQuery(GuideFindManyArgs)
  async guides(@common.Req() request: Request): Promise<Guide[]> {
    const args = plainToClass(GuideFindManyArgs, request.query);
    return this.service.guides({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        audioUrl: true,
        content: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Guide })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async guide(
    @common.Param() params: GuideWhereUniqueInput
  ): Promise<Guide | null> {
    const result = await this.service.guide({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        audioUrl: true,
        content: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Guide })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGuide(
    @common.Param() params: GuideWhereUniqueInput,
    @common.Body() data: GuideUpdateInput
  ): Promise<Guide | null> {
    try {
      return await this.service.updateGuide({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          audioUrl: true,
          content: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Guide })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGuide(
    @common.Param() params: GuideWhereUniqueInput
  ): Promise<Guide | null> {
    try {
      return await this.service.deleteGuide({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          audioUrl: true,
          content: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/generate-guide")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateGuide(
    @common.Body()
    body: StoreGuideInput
  ): Promise<string> {
    return this.service.GenerateGuide(body);
  }

  @common.Get("/retrieve-guide/:locationId")
  @swagger.ApiOkResponse({
    type: GuideCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RetrieveGuide(
    @common.Body()
    body: StoreGuideInput
  ): Promise<GuideCreateInput[]> {
    return this.service.RetrieveGuide(body);
  }

  @common.Post("/store-guide")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async StoreGuide(
    @common.Body()
    body: StoreGuideInput
  ): Promise<string> {
    return this.service.StoreGuide(body);
  }
}
